문자열
	문자열의 길이는 정해져있지 않기에 기본 자료형이 아님
	문자열은 여러가지 문자가 모인 것(공백도 문자)
	따라서 char str[글자수]를 사용함 따라서 배열의 크기를 따로 저장해 둬야 함
		여기서 실수해서 문제가 생길 수 있음 그래서 문자열이 끝나는 위치를 '\0'으로 표시(컴파일러가 알아서 넣어줌)
			단 직접 하나하나 넣어줄 때는 '\0'을 넣어주지 않음
	문자열의 길이는 널 문자를 만나면 멈추는 for문으로 간단하게 구할 수 있음
		포인터와 while를 이용해서도 구할 수 있음
		<string.h>를 include하면 문자열 길이 구하는 함수 있음	strlen()
	문자열 비교
		포인터와 아스키코드, 널 문자를 이용해서 구할 수 있음
		문자열 비교함수도 <string.h>안에 있음	strcmp()
	대소문자 구분없이 문자열 비교
		<ctype.h>를 include하고 tolower함수를 사용해서
			문자열 비교할때 썼던 함수를 쓰면 됨
	문자열 복사
		그냥 복사할 경우 src가 dest보다 클 경우 소유하지 않은 메모리까지 덮어  쓸 수 있음 그래서 dest의 최대길이를 지정해주는게 좋음
			크기 통제를 확실하게 할 수 있다면 최대길이를 안 넣어도 됨
		마찬가지로 함수가 있음
			최대길이를 지정해주는 함수와 안하는 함수 둘 다 있음	strcpy(), strncpy()
			src가 dest의 최대길이보다 길 경우 마지막 요소에 널 문자를 넣어주고
			src가 dest의 최대길이보다 짧을 경우 그 뒤 공간에는 널 문자를 넣어줌
				strcpy()를 사용할 때 src가 dest보다 클 경우 잘못된 메모리 쓰기가 발생 됨 따라서 크기를 확실히 통제 가능하다면 사용
				strncpy()를 사용할 때 src보다 dest가 길 경우 남은 요소를 널 문자로 채우기 때문에 덜 빠름
					+ dest가 src보다 짧을 경우 프로그래머가 마지막 요소에 널 문자를 붙여줘야 함
	문자열 합치기
		strcat(), strncat()가 있음
			마찬가지로 크기 통제를 잘 해야함
	문자열 찾기
		strstr()이 있음
			문자열의 원본 시작 주소를 반환함
			NULL포인터 반환할 경우 컴파일러마다 null로 출력해줄 경우가 있지만 안 해주는 경우도 있으니
				NULL일 경우와 아닐 경우 비교해서 출력하는게 좋음
	문자열 토큰화
		strtok()가 있음
		구분문자(delims)
		토큰화할 문자열을 사용해서 함
		토큰화하는 문자열은 원본이 바뀐다.
			처음만 토큰화할 문자열을 넣고
				그 다음 토큰을 구하려면 문자열 대신 NULL(구분문자를 NULL로 바꾸기 때문)
					더 이상 토큰이 없다면 NULL을 반환
출력
	프로그램에서 프로그램 외부로 데이터를 보여주는 행위
	서식 지정(formatted) 출력
		printf() : 콘솔창(stdout)에 출력
		fprintf() : 스트림에 출력
			보통 프로그램이 실행될 때 기본적으로 3개의 스트림을 줌(stdout, stdin, stderr 이 3개를 표준 스트림(standard stream)이라고 함)
			stdout
				보통 라인 버퍼링을 사용
				버퍼링
					출력할 내용이 있어도 곧바로 출력하지 않고 쌓아 둠
					버퍼가 차면 출력
					표준에서 stdout, stderr, stdin의 버퍼링 종류를 지정하지 않음(구현따라 다를 수 있음)
					라인 버퍼링(line buffering)
						버퍼가 꽉 차거나 버퍼에 \n이 들어올 때 버퍼를 비움
						강제로 버퍼를 비우고 싶으면 fflush(stdout);를 호출하면 됨
					풀 버퍼링(full buffering)
						버퍼가 가득 차면 비움. 라인 버퍼링과 마찬가지로 fflush()로 강제로 비울 수 있음
					버퍼링 없음(no buffering)
						버퍼를 사용하지 않음
		sprintf() : 문자열에 출력
			char배열에 출력
			가장 빨리 문자열을 조작하는 함수
			c99에는 snprintf()가 들어옴
			fprintf(), sprintf()는 printf()하고 작동법은 동일
				첫 번째 매개변수로 출력할 곳을 넣어주는게 차이점
	printf()의 첫 번째 매개변수는 문자열이어야 함
	서식 문자열
		형식 : %[플래그][너비][.숫자 정밀도 | .문자열 최소/ 최대 출력 개수][길이]서식 지정자
			플래그(선택), 너비(선택), 정밀도(선택), 길이(선택), 서식 지정자(필수)
			반드시 순서를 지켜 작성해야 함
		서식 지정자
			%를 출력하려면 %%
			문자 출력 : %c
			문자열 출력 : %s
			부호있는 정수 출력 : %d
			부호없는 정수 출력 : %u
			8진수 출력 : %o
				부호없는 정수(부호 있을 경우 비트패턴 출력), 숫자 앞에 0은 안 붙여줌
				#을 붙이면 0을 붙여줌
			16진수 소문자 출력 : %x
				부호없는 정수(부호 있을 경우 비트패턴 출력), 숫자 앞에 0x는 안붙여줌
				#을 붙이면 0x을 붙여줌
			16진수 대문자 출력 : %X
				부호없는 정수(부호 있을 경우 비트패턴 출력), 숫자 앞에 0X는 안붙여줌
				#을 붙이면 0X을 붙여줌
			부동소수점 출력 : %f
			부동소수점을 지수표기법으로 출력 : %e/E
			포인터값을 출력 : "%p", (void*)ptr
				void*만 받음
		너비
			기본적으로 오른쪽 정렬
			서식 지정자 앞에 위치
			플래그
				왼쪽 정렬 : %-[너비]서식 지정자
					기본은 오른쪽 정렬
				빈 공백을 0으로 채우기 : %0[너비]서식 지정자
					-가 있을 경우 무시됨
				항상 부호 표시 : %+[너비]서식 지정자
					기본은 음수 기호만 출력
				양수인 경우에 부호칸을 비워둠 : %공백[너비]서식 지정자
					+가 있을 경우 무시됨
		정밀도
			서식 지정자 f와 함께 사용
				기본 소수점 아랫자리 수 : 6
				%f(최소 너비).(소수점 아랫자리 수)
					최소너비 : (소수점 포함)원래 숫자의 너비보다 최소 너비가 크면 공백으로 채움
					소수점 아랫자리수 : (소수점 포함 안함)원래 숫자의 소수점 아랫자리 수보다 소수점 아랫자리수가 크면 0으로 채움
			서식 지정자 s와 함께 사용				
				%s(최소 너비).(최대 너비)
				출력할 문자열의 길이가 최소 너비보다 작으면 왼쪽을 공백으로 채움
				출력할 문자열의 길이가 최대 너비보다 크면 자름
		길이
			인자의 바이트 크기를 지정해 준다
			최근 플랫폼에서는 별 의미 없음
			int == long, int, double == long double인 경우가 보통
			위의 경우가 아니더라도 long double 잘 안 씀
	기타 출력 함수
		puts()
			문자열을 stdout에 출력
			마지막에 줄도 바꿔준다.
			fputs(str, stdout)와 같음
		putchar()
			문자를 stdout에 출력
			fputc(ch, stdout)와 같음